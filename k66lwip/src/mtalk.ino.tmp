// K66 K64 lwip multicast talk chat
//  ? enable IGMP

#include "IPAddress.h"   // teensy
#include "lwipk66.h"

// api includes
#include "lwip/udp.h"
#include "lwip/igmp.h"
#include "lwip/stats.h"

#define swap2 __builtin_bswap16
#define swap4 __builtin_bswap32

// debug stats stuff
extern "C" { 
	uint32_t inpkts,outpkts;
	uint32_t tom1,tom2,tom3;  // debug
//	char thdstr[64];
#if LWIP_STATS
	struct stats_ lwip_stats;
#endif
}

#define PRREG(x) Serial.print(#x" 0x"); Serial.println(x,HEX)

void prregs() {
    PRREG(MPU_RGDAAC0);
    PRREG(SIM_SCGC2);
    PRREG(SIM_SOPT2);
    PRREG(ENET_PALR);
    PRREG(ENET_PAUR);
    PRREG(ENET_EIR);
    PRREG(ENET_EIMR);
    PRREG(ENET_ECR);
    PRREG(ENET_MSCR);
    PRREG(ENET_MRBR);
    PRREG(ENET_RCR);
    PRREG(ENET_TCR);
    PRREG(ENET_TACC);
    PRREG(ENET_RACC);
    PRREG(ENET_MMFR);
    PRREG(ENET_GALR);   // multicast hash
    PRREG(ENET_GAUR);
}

void print_stats() {
	 // lwip stats_display() needed printf
#if LWIP_STATS
	char str[128];

	// my  LINK stats
	sprintf(str,"LINK in %d out %d drop %d memerr %d",
	 lwip_stats.link.recv,lwip_stats.link.xmit,lwip_stats.link.drop,lwip_stats.link.memerr);
	Serial.println(str);
	sprintf(str,"UDP in %d out %d drop %d memerr %d",
	 lwip_stats.udp.recv,lwip_stats.udp.xmit,lwip_stats.udp.drop,lwip_stats.udp.memerr);
	Serial.println(str);
	sprintf(str,"ICMP in %d out %d",
	 lwip_stats.icmp.recv,lwip_stats.icmp.xmit);
	Serial.println(str);
#if LWIP_IGMP
	sprintf(str,"IGMP in %d out %d drops %d join %d",
	 lwip_stats.igmp.recv,lwip_stats.igmp.xmit,lwip_stats.igmp.drop,lwip_stats.igmp.tx_join);
	Serial.println(str);
#endif
#if MEM_STATS
	sprintf(str,"HEAP avail %d used %d max %d err %d",
	 lwip_stats.mem.avail,lwip_stats.mem.used,lwip_stats.mem.max,lwip_stats.mem.err);
	Serial.println(str);
#endif
#endif
}


void dump(uint8_t * buff, int bytes) {
  int i, cnt = 0, lines = (bytes + 15) / 16;
  char str[64];

  while (lines--) {
    sprintf(str, "%04x  ", cnt);  Serial.print(str);
    for (i = 0; i < 16; i++) {
      if (i % 4 == 3) sprintf(str, "%02x ", buff[i]);
      else sprintf(str, "%02x", buff[i]);
      Serial.print(str);
    }
    Serial.print("|");
    for (i = 0; i < 16; i++) {
      if (buff[i] < ' ' || buff[i]  > '\177') Serial.print("?");
      else Serial.print((char)buff[i]);
    }
    Serial.print("|");
    Serial.println();
    buff += 16;
    cnt += 16;
  }
}

#define MGROUP "224.7.8.9"
#define MPORT 7654

// reverse of crc32 ethernet (04C11DB7)  0xEDB88320
// used by k64 for multicast mac hash, could use hardware CRC

uint32_t crc32(uint8_t *address, uint32_t bytes) {
    uint32_t crc = 0xFFFFFFFFU;
    uint32_t count1 = 0;
    uint32_t count2 = 0;

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < bytes; count1++)
    {
        uint8_t c = address[count1];
        for (count2 = 0; count2 < 0x08U; count2++)
        {
            if ((c ^ crc) & 1U)
            {
                crc >>= 1U;
                c >>= 1U;
                crc ^= 0xEDB88320U;
            }
            else
            {
                crc >>= 1U;
                c >>= 1U;
            }
        }
    }
	return crc;
}

void mcast_init() {
	// do igmp and MAC input filter
	uint8_t mac[6];
	uint8_t *ip;
	uint32_t crc;
    ip_addr_t mgroup;

	inet_aton(MGROUP, &mgroup);
	ip = (uint8_t *) &mgroup.addr;
	mac[0]=1;
	mac[1]=0;
	mac[2]= 0x5e;
	mac[3] = ip[1] & 0x7f;
	mac[4] = ip[2];
	mac[5] = ip[3];
	crc = crc32(mac,6);
	// join group, set bit in 64-bit hash (2 regs)
	igmp_joingroup(IP_ADDR_ANY,&mgroup);
	// leave group need to clear bit
	int hash = (crc >> 26) & 0x3f;   // 6 bit hash
	Serial.print("crc ");Serial.print(crc,HEX); Serial.print(" hash ");
	Serial.println(hash,HEX);
	if (hash & 0x20) ENET_GAUR |= 1 << (hash & 0x1f);
	 else ENET_GALR |= 1 << (hash & 0x1f);

//	ENET_RCR |= ENET_RCR_PROM; // hack in promisuous
//    ENET_GAUR = ENET_GALR = 0xffffffff;   // hack all hashes
//	ENET_GAUR = 0; ENET_GALR = 0x00000040;  // hack works for 224.7.8.9
}

// UDP callbacks
//  fancy would be pbuf recv_q per UDP pcb, if q full, drop and free pbuf
void udp_callback(void * arg, struct udp_pcb * upcb, struct pbuf * p, struct ip_addr * addr, u16_t port) 
{
	if (p == NULL) return;
	Serial.print(">>>>from ");
    Serial.print(ipaddr_ntoa(addr));
	Serial.print(": ");
	Serial.print(p->tot_len); Serial.println(" bytes");
	Serial.println((char *)(p->payload));
    // dump((uint8_t *)p->payload,64);
	pbuf_free(p);
}


void udp_listen() {
    struct udp_pcb *pcb;

    pcb = udp_new();
    udp_bind(pcb, IP_ADDR_ANY, MPORT);    // local port
    udp_recv(pcb,udp_callback,NULL);    // do once?
    // fall into loop  ether_poll
}

void udp_chirp(char *msg, int bytes) {
    struct udp_pcb *pcb;
    pbuf *p;
    ip_addr_t server;

	inet_aton(MGROUP, &server);
    pcb = udp_new();
	p = pbuf_alloc(PBUF_TRANSPORT, bytes, PBUF_RAM);
	memcpy(p->payload,msg,bytes);
	udp_sendto(pcb,p,&server,MPORT);
	pbuf_free(p);
}

uint8_t tstvec[9] = {'1','2','3','4','5','6','7','8','9'};

void setup() {
	Serial.begin(9600);
	while(!Serial);
	delay(3000);
    Serial.println();Serial.print(F_CPU); Serial.print(" ");
    Serial.print(F_BUS); Serial.print(" ");
    Serial.print(F_MEM); Serial.print(" ");
    Serial.print(__TIME__);Serial.print(" ");Serial.println(__DATE__);

	Serial.println("lwip multicast talk");
	Serial.println(crc32(tstvec,9),HEX);
	Serial.println(~crc32(tstvec,9),HEX);   // 0xcbf43926

	// init Ether and lwip
#if 1
	ether_init("192.168.1.23","255.255.255.0","192.168.1.1");
#else
	if (ether_init_dhcp() < 0) {
		Serial.println("DHCP failed");
	   Serial.println(tom1);
	   char str[128];
	   sprintf(str,"in %lu  out %lu ",inpkts,outpkts);
	   Serial.println(str);
	   print_stats();
		while(1);
    }
#endif
	IPAddress myip(ether_get_ipaddr());
	Serial.print("my IP "); Serial.println(myip);
	mcast_init();
	prregs();
	udp_listen();
}

void loop() {
	static uint32_t ms = millis();

	ether_poll();    // check for new pkts, check timers
	if (millis() -ms > 5*1000) {   // active "delay"
	   char str[128];
	   sprintf(str,"%lu ms  in %lu  out %lu ",ms,inpkts,outpkts);
	   Serial.println(str);
	   print_stats();
	   udp_chirp(str,strlen(str)+1);  
	   ms = millis();
	}
}
