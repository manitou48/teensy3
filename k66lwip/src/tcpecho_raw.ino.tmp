// K66 K64 tcp echo raw
//https://github.com/goertzenator/lwip/blob/master/contrib-1.4.0/apps/tcpecho_raw/echo.c
//  problems with TCP connect hangs ?  if no tcp connects, udp server will run
// discussion on https://forum.pjrc.com/threads/34808-K66-Beta-Test?p=109161&viewfull=1#post109161

#include "IPAddress.h"   // teensy
#include "lwipk66.h"

// api includes

#include "lwip/tcp.h"
#include "lwip/stats.h"

#define swap2 __builtin_bswap16
#define swap4 __builtin_bswap32

// debug stats stuff
extern "C" { 
	uint32_t inpkts,outpkts;
	uint32_t tom1,tom2,tom3;  // debug
//	char thdstr[64];
#if LWIP_STATS
	struct stats_ lwip_stats;
#endif
}

#define PRREG(x) Serial.print(#x" 0x"); Serial.println(x,HEX)

void prregs() {
    PRREG(MPU_RGDAAC0);
    PRREG(SIM_SCGC2);
    PRREG(SIM_SOPT2);
    PRREG(ENET_PALR);
    PRREG(ENET_PAUR);
    PRREG(ENET_EIR);
    PRREG(ENET_EIMR);
    PRREG(ENET_ECR);
    PRREG(ENET_MSCR);
    PRREG(ENET_MRBR);
    PRREG(ENET_RCR);
    PRREG(ENET_TCR);
    PRREG(ENET_TACC);
    PRREG(ENET_RACC);
    PRREG(ENET_MMFR);
}

void print_stats() {
	 // lwip stats_display() needed printf
#if LWIP_STATS
	char str[128];

	// my  LINK stats
	sprintf(str,"LINK in %d out %d drop %d memerr %d",
	 lwip_stats.link.recv,lwip_stats.link.xmit,lwip_stats.link.drop,lwip_stats.link.memerr);
	Serial.println(str);
	sprintf(str,"TCP in %d out %d drop %d memerr %d",
	 lwip_stats.tcp.recv,lwip_stats.tcp.xmit,lwip_stats.tcp.drop,lwip_stats.tcp.memerr);
	Serial.println(str);
	sprintf(str,"UDP in %d out %d drop %d memerr %d",
	 lwip_stats.udp.recv,lwip_stats.udp.xmit,lwip_stats.udp.drop,lwip_stats.udp.memerr);
	Serial.println(str);
	sprintf(str,"ICMP in %d out %d",
	 lwip_stats.icmp.recv,lwip_stats.icmp.xmit);
	Serial.println(str);
#if MEM_STATS
	sprintf(str,"HEAP avail %d used %d max %d err %d",
	 lwip_stats.mem.avail,lwip_stats.mem.used,lwip_stats.mem.max,lwip_stats.mem.err);
	Serial.println(str);
#endif
#endif
}

static struct tcp_pcb *echo_pcb;

enum echo_states
{
  ES_NONE = 0,
  ES_ACCEPTED,
  ES_RECEIVED,
  ES_CLOSING
};

struct echo_state
{
  u8_t state;
  u8_t retries;
  struct tcp_pcb *pcb;
  /* pbuf (chain) to recycle */
  struct pbuf *p;
};

err_t echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err);
err_t echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);
void echo_error(void *arg, err_t err);
err_t echo_poll(void *arg, struct tcp_pcb *tpcb);
err_t echo_sent(void *arg, struct tcp_pcb *tpcb, u16_t len);
void echo_send(struct tcp_pcb *tpcb, struct echo_state *es);
void echo_close(struct tcp_pcb *tpcb, struct echo_state *es);

void
echo_init(void)
{
  echo_pcb = tcp_new();
  if (echo_pcb != NULL)
  {
    err_t err;

    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
    if (err == ERR_OK)
    {
      echo_pcb = tcp_listen(echo_pcb);
      tcp_accept(echo_pcb, echo_accept);
    }
    else 
    {
      /* abort? output diagnostic? */
    }
  }
  else
  {
    /* abort? output diagnostic? */
  }
}


err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  err_t ret_err;
  struct echo_state *es;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
  if (es != NULL)
  {
    es->state = ES_ACCEPTED;
    es->pcb = newpcb;
    es->retries = 0;
    es->p = NULL;
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
    tcp_recv(newpcb, echo_recv);
    tcp_err(newpcb, echo_error);
    tcp_poll(newpcb, echo_poll, 0);
    ret_err = ERR_OK;
  }
  else
  {
    ret_err = ERR_MEM;
  }
  return ret_err;  
}

err_t
echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
  struct echo_state *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
  es = (struct echo_state *)arg;
  if (p == NULL)
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
    if(es->p == NULL)
    {
       /* we're done sending, close it */
       echo_close(tpcb, es);
    }
    else
    {
      /* we're not done yet */
      tcp_sent(tpcb, echo_sent);
      echo_send(tpcb, es);
    }
    ret_err = ERR_OK;
  }
  else if(err != ERR_OK)
  {
    /* cleanup, for unkown reason */
    if (p != NULL)
    {
      es->p = NULL;
      pbuf_free(p);
    }
    ret_err = err;
  }
  else if(es->state == ES_ACCEPTED)
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
    /* store reference to incoming pbuf (chain) */
    es->p = p;
    /* install send completion notifier */
    tcp_sent(tpcb, echo_sent);
    echo_send(tpcb, es);
    ret_err = ERR_OK;
  }
  else if (es->state == ES_RECEIVED)
  {
    /* read some more data */
    if(es->p == NULL)
    {
      es->p = p;
      tcp_sent(tpcb, echo_sent);
      echo_send(tpcb, es);
    }
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
      pbuf_chain(ptr,p);
    }
    ret_err = ERR_OK;
  }
  else if(es->state == ES_CLOSING)
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
    es->p = NULL;
    pbuf_free(p);
    ret_err = ERR_OK;
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
    es->p = NULL;
    pbuf_free(p);
    ret_err = ERR_OK;
  }
  return ret_err;
}

void
echo_error(void *arg, err_t err)
{
  struct echo_state *es;

  LWIP_UNUSED_ARG(err);

  es = (struct echo_state *)arg;
  if (es != NULL)
  {
    mem_free(es);
  }
}

err_t
echo_poll(void *arg, struct tcp_pcb *tpcb)
{
  err_t ret_err;
  struct echo_state *es;

  es = (struct echo_state *)arg;
  if (es != NULL)
  {
    if (es->p != NULL)
    {
      /* there is a remaining pbuf (chain)  */
      tcp_sent(tpcb, echo_sent);
      echo_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
      {
        echo_close(tpcb, es);
      }
    }
    ret_err = ERR_OK;
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
    ret_err = ERR_ABRT;
  }
  return ret_err;
}

err_t
echo_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
  struct echo_state *es;

  LWIP_UNUSED_ARG(len);

  es = (struct echo_state *)arg;
  es->retries = 0;
  
  if(es->p != NULL)
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, echo_sent);
    echo_send(tpcb, es);
  }
  else
  {
    /* no more pbufs to send */
    if(es->state == ES_CLOSING)
    {
      echo_close(tpcb, es);
    }
  }
  return ERR_OK;
}

void
echo_send(struct tcp_pcb *tpcb, struct echo_state *es)
{
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 
  while ((wr_err == ERR_OK) &&
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
  ptr = es->p;

  /* enqueue data for transmission */
  wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
  if (wr_err == ERR_OK)
  {
     u16_t plen;
      u8_t freed;

     plen = ptr->len;
     /* continue with next pbuf in chain (if any) */
     es->p = ptr->next;
     if(es->p != NULL)
     {
       /* new reference! */
       pbuf_ref(es->p);
     }
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
      }
      while(freed == 0);
     /* we can read more data now */
     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
   }
   else
   {
     /* other problem ?? */
   }
  }
}

void
echo_close(struct tcp_pcb *tpcb, struct echo_state *es)
{
  tcp_arg(tpcb, NULL);
  tcp_sent(tpcb, NULL);
  tcp_recv(tpcb, NULL);
  tcp_err(tpcb, NULL);
  tcp_poll(tpcb, NULL, 0);
  
  if (es != NULL)
  {
    mem_free(es);
  }  
  tcp_close(tpcb);
}



void setup() {
	Serial.begin(9600);
	while(!Serial);
	delay(3000);
    Serial.println();Serial.print(F_CPU); Serial.print(" ");
    Serial.print(F_BUS); Serial.print(" ");
    Serial.print(F_MEM); Serial.print(" ");
    Serial.print(__TIME__);Serial.print(" ");Serial.println(__DATE__);

	Serial.println("lwip raw tcp echo tcp  port 7");

	// init Ether and lwip
#if 1
	ether_init("192.168.1.23","255.255.255.0","192.168.1.1");
#else
	if (ether_init_dhcp() < 0) {
		Serial.println("DHCP failed");
	   Serial.println(tom1);
	   char str[128];
	   sprintf(str,"in %lu  out %lu ",inpkts,outpkts);
	   Serial.println(str);
	   print_stats();
		while(1);
    }
#endif
	IPAddress myip(ether_get_ipaddr());
	Serial.print("my IP "); Serial.println(myip);
	prregs();

	echo_init();
}

void loop() {
	static uint32_t ms = millis();
	ether_poll();    // check for new pkts, check timers
	if (millis() -ms > 5000) {   // active "delay"
	   char str[128];
	   sprintf(str,"%lu ms  in %lu  out %lu ",ms,inpkts,outpkts);
	   Serial.println(str);
	   print_stats();
//	   Serial.println(thdstr);
	   ms = millis();
	}
}
